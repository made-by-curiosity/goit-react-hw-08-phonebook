{"version":3,"file":"static/js/599.15efc745.chunk.js","mappings":"+RAGaA,EAAcC,EAAAA,EAAAA,IAAH,iKAWXC,EAAeD,EAAAA,EAAAA,IAAH,mLAaZE,EAAaF,EAAAA,EAAAA,EAAH,oEAKVG,GAAWH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,yL,kNC9BRK,EAAcL,EAAAA,EAAAA,IAAH,8CAIXM,EAAYN,EAAAA,EAAAA,GAAH,uEAKTO,EAAWP,EAAAA,EAAAA,KAAH,wNAeRQ,EAAYR,EAAAA,EAAAA,MAAH,6SAcJ,qBAAGS,OAAuB,MAAQ,MAAlC,IAMLC,EAAaV,EAAAA,EAAAA,OAAH,gqBAoCVW,EAAeX,EAAAA,EAAAA,EAAH,uD,uJChFZY,E,QAAeZ,EAAAA,EAAH,sE,6BCenBa,EAASC,EAAAA,GACL,CACNC,MAAOD,EAAAA,KAEJC,MAAM,mDACNC,SAAS,2BACZC,SAAUH,EAAAA,KAAaE,SAAS,6BAEjCA,WAEUE,EAAY,SAAC,GAAmB,IAAD,QAAhBC,EAAgB,EAAhBA,UAC1B,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CACbN,MAAO,GACPE,SAAU,IAEZK,KAAM,WACNC,UAAUC,EAAAA,EAAAA,GAAYX,KAVtBY,EADF,EACEA,SACAC,EAFF,EAEEA,aACajB,EAHf,EAGEkB,UAAalB,OACbmB,EAJF,EAIEA,MAUIC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAY9B,OACE,UAAC,KAAD,CAAUC,SAAUR,GAXL,SAAC,GAAyB,IAAvBX,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,SACzBY,GACEM,EAAAA,EAAAA,IAAM,CACJpB,MAAAA,EACAE,SAAAA,KAGJW,GACD,IAGC,UACGT,IAAa,SAAC,IAAD,UAAYA,KAE1B,8BACE,qCACA,SAAC,MAAD,kBACMM,EAAS,UADf,IAEEW,WAAS,EACTC,aAAa,MACb5B,OAAQA,EAAOM,aAGlB,UAAAN,EAAOM,aAAP,eAAcuB,WACb,SAAC,KAAD,oBAAe7B,EAAOM,aAAtB,aAAe,EAAcuB,WAE/B,8BACE,wCACA,SAAC,MAAD,kBACMb,EAAS,aADf,IAEEc,KAAK,WACLF,aAAa,MACb5B,OAAQA,EAAOQ,gBAGlB,UAAAR,EAAOQ,gBAAP,eAAiBqB,WAChB,SAAC,KAAD,oBAAe7B,EAAOQ,gBAAtB,aAAe,EAAiBqB,WAGlC,SAAC,KAAD,CAAYC,KAAK,SAAjB,oBACCR,IACC,UAACnB,EAAD,mCACsB,SAAC,KAAD,CAAU4B,GAAG,YAAb,qBADtB,4BAOP,EClFD,EARkB,WAChB,OACE,SAAC,KAAD,WACE,SAACtB,EAAD,CAAWC,UAAU,YAG1B,C","sources":["components/Hero/Hero.styled.jsx","components/MainForm/MainForm.styled.jsx","components/LoginForm/LoginFrom.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const HeroWrapper = styled.div`\n  padding-top: 50px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  gap: 10px;\n`;\n\nexport const LoginWrapper = styled.div`\n  padding: 100px 0;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  flex-grow: 1;\n\n  gap: 10px;\n`;\n\nexport const Decription = styled.p`\n  max-width: 800px;\n  text-align: center;\n`;\n\nexport const LinkItem = styled(Link)`\n  color: rgb(123, 104, 238);\n  text-decoration: underline;\n\n  transition: color 300ms ease-out;\n\n  &:hover,\n  &:focus {\n    color: rgb(72, 61, 139);\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n  padding-top: 50px;\n`;\n\nexport const FromTitle = styled.h2`\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nexport const MainForm = styled.form`\n  width: 500px;\n  margin: 0 auto;\n  padding: 30px 50px 50px;\n\n  display: flex;\n  flex-direction: column;\n\n  gap: 10px;\n\n  background-color: rgb(35, 48, 68);\n\n  border-radius: 4px;\n`;\n\nexport const MainInput = styled.input`\n  width: 100%;\n  min-width: 0px;\n  margin: 0px;\n  padding: 10px 13px;\n\n  display: block;\n\n  font: inherit;\n  letter-spacing: inherit;\n  color: currentcolor;\n  border: 1px solid;\n  border-radius: 4px;\n\n  border-color: ${({ errors }) => (errors ? 'red' : 'gray')};\n\n  background: none;\n  outline: none;\n`;\n\nexport const MainButton = styled.button`\n  margin-top: 16px;\n  padding: 10px 20px;\n\n  display: inline-block;\n  min-width: 100px;\n\n  color: currentColor;\n  border-radius: 4px;\n  transition: background-color 300ms ease-out, color 100ms ease-out;\n\n  background-color: rgb(64, 122, 214);\n\n  box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;\n\n  &:hover,\n  &:focus {\n    background-color: rgb(44, 85, 149);\n    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;\n  }\n\n  &:active {\n    background-color: rgba(44, 85, 149, 0.5);\n  }\n\n  &:disabled {\n    background-color: rgba(44, 85, 149, 0.3);\n\n    color: #d5d5d5;\n\n    &:hover {\n      cursor: not-allowed;\n    }\n  }\n`;\n\nexport const ErrorMessage = styled.p`\n  color: rgba(255, 0, 0, 0.9);\n`;\n","import styled from '@emotion/styled';\n\nexport const AuthErrorMsg = styled.p`\n  margin-top: 20px;\n\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  ErrorMessage,\n  FromTitle,\n  MainButton,\n  MainForm,\n  MainInput,\n} from 'components/MainForm/MainForm.styled';\nimport { LinkItem } from 'components/Hero/Hero.styled';\nimport { AuthErrorMsg } from './LoginFrom.styled';\nimport { logIn } from 'redux/auth/operations';\nimport { selectAuthError } from 'redux/auth/selectors';\n\nconst schema = yup\n  .object({\n    email: yup\n      .string()\n      .email('Email should have valid form \"example@mail.com\"')\n      .required('This field is required!'),\n    password: yup.string().required('This field is required!'),\n  })\n  .required();\n\nexport const LoginForm = ({ formTitle }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n  });\n\n  const dispatch = useDispatch();\n  const AuthError = useSelector(selectAuthError);\n\n  const onSubmit = ({ email, password }) => {\n    dispatch(\n      logIn({\n        email,\n        password,\n      })\n    );\n    reset();\n  };\n\n  return (\n    <MainForm onSubmit={handleSubmit(onSubmit)}>\n      {formTitle && <FromTitle>{formTitle}</FromTitle>}\n\n      <label>\n        <span>Email</span>\n        <MainInput\n          {...register('email')}\n          autoFocus\n          autoComplete=\"off\"\n          errors={errors.email}\n        />\n      </label>\n      {errors.email?.message && (\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n      )}\n      <label>\n        <span>Password</span>\n        <MainInput\n          {...register('password')}\n          type=\"password\"\n          autoComplete=\"off\"\n          errors={errors.password}\n        />\n      </label>\n      {errors.password?.message && (\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n      )}\n\n      <MainButton type=\"submit\">Log in</MainButton>\n      {AuthError && (\n        <AuthErrorMsg>\n          User doesn't exist, <LinkItem to=\"/register\">Sign Up</LinkItem> if\n          you're new here.\n        </AuthErrorMsg>\n      )}\n    </MainForm>\n  );\n};\n\nLoginForm.propTypes = { formTitle: PropTypes.string.isRequired };\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { FormWrapper } from 'components/MainForm/MainForm.styled';\n\nconst LoginPage = () => {\n  return (\n    <FormWrapper>\n      <LoginForm formTitle=\"Log In\" />\n    </FormWrapper>\n  );\n};\n\nexport default LoginPage;\n"],"names":["HeroWrapper","styled","LoginWrapper","Decription","LinkItem","Link","FormWrapper","FromTitle","MainForm","MainInput","errors","MainButton","ErrorMessage","AuthErrorMsg","schema","yup","email","required","password","LoginForm","formTitle","useForm","defaultValues","mode","resolver","yupResolver","register","handleSubmit","formState","reset","dispatch","useDispatch","AuthError","useSelector","selectAuthError","onSubmit","logIn","autoFocus","autoComplete","message","type","to"],"sourceRoot":""}