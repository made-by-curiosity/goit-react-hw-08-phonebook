{"version":3,"file":"static/js/787.e2af2bee.chunk.js","mappings":"wUAEaA,EAAcC,EAAAA,EAAAA,IAAH,8CAIXC,EAAYD,EAAAA,EAAAA,GAAH,uEAKTE,EAAWF,EAAAA,EAAAA,KAAH,wNAeRG,EAAYH,EAAAA,EAAAA,MAAH,6SAcJ,qBAAGI,OAAuB,MAAQ,MAAlC,IAMLC,EAAaL,EAAAA,EAAAA,OAAH,gqBAoCVM,EAAeN,EAAAA,EAAAA,EAAH,uD,sJCpEnBO,EAASC,EAAAA,GACL,CACNC,KAAMD,EAAAA,KAAaE,SAAS,2BAC5BC,MAAOH,EAAAA,KAEJG,MAAM,mDACND,SAAS,2BACZE,SAAUJ,EAAAA,KAAaE,SAAS,6BAEjCA,WAEUG,EAAa,SAAC,GAAmB,IAAD,YAAhBC,EAAgB,EAAhBA,UAC3B,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CACbP,KAAM,GACNE,MAAO,GACPC,SAAU,IAEZK,KAAM,WACNC,UAAUC,EAAAA,EAAAA,GAAYZ,KAXtBa,EADF,EACEA,SACAC,EAFF,EAEEA,aACajB,EAHf,EAGEkB,UAAalB,OACbmB,EAJF,EAIEA,MAWIC,GAAWC,EAAAA,EAAAA,MAajB,OACE,UAAC,KAAD,CAAUC,SAAUL,GAZL,SAAC,GAA+B,IAA7BZ,EAA4B,EAA5BA,KAAME,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/BY,GACEG,EAAAA,EAAAA,IAAO,CACLlB,KAAAA,EACAE,MAAAA,EACAC,SAAAA,KAGJW,GACD,IAGC,UACGT,IAAa,SAAC,IAAD,UAAYA,KAC1B,8BACE,oCACA,SAAC,MAAD,kBACMM,EAAS,SADf,IAEEQ,aAAa,MACbC,WAAS,EACTzB,OAAQA,EAAOK,YAGlB,UAAAL,EAAOK,YAAP,eAAaqB,WACZ,SAAC,KAAD,oBAAe1B,EAAOK,YAAtB,aAAe,EAAaqB,WAE9B,8BACE,qCACA,SAAC,MAAD,kBACMV,EAAS,UADf,IAEEQ,aAAa,MACbxB,OAAQA,EAAOO,aAGlB,UAAAP,EAAOO,aAAP,eAAcmB,WACb,SAAC,KAAD,oBAAe1B,EAAOO,aAAtB,aAAe,EAAcmB,WAG/B,8BACE,wCACA,SAAC,MAAD,kBACMV,EAAS,aADf,IAEEW,KAAK,WACLH,aAAa,MACbxB,OAAQA,EAAOQ,gBAGlB,UAAAR,EAAOQ,gBAAP,eAAiBkB,WAChB,SAAC,KAAD,oBAAe1B,EAAOQ,gBAAtB,aAAe,EAAiBkB,WAGlC,SAAC,KAAD,CAAYC,KAAK,SAAjB,uBAGL,ECtFD,EARmB,WACjB,OACE,SAAC,KAAD,WACE,SAAClB,EAAD,CAAYC,UAAU,aAG3B,C","sources":["components/MainForm/MainForm.styled.jsx","components/SignUpForm/SignUpForm.jsx","pages/SignUpPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n  padding-top: 50px;\n`;\n\nexport const FromTitle = styled.h2`\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nexport const MainForm = styled.form`\n  width: 500px;\n  margin: 0 auto;\n  padding: 30px 50px 50px;\n\n  display: flex;\n  flex-direction: column;\n\n  gap: 10px;\n\n  background-color: rgb(35, 48, 68);\n\n  border-radius: 4px;\n`;\n\nexport const MainInput = styled.input`\n  width: 100%;\n  min-width: 0px;\n  margin: 0px;\n  padding: 10px 13px;\n\n  display: block;\n\n  font: inherit;\n  letter-spacing: inherit;\n  color: currentcolor;\n  border: 1px solid;\n  border-radius: 4px;\n\n  border-color: ${({ errors }) => (errors ? 'red' : 'gray')};\n\n  background: none;\n  outline: none;\n`;\n\nexport const MainButton = styled.button`\n  margin-top: 16px;\n  padding: 10px 20px;\n\n  display: inline-block;\n  min-width: 100px;\n\n  color: currentColor;\n  border-radius: 4px;\n  transition: background-color 300ms ease-out, color 100ms ease-out;\n\n  background-color: rgb(64, 122, 214);\n\n  box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;\n\n  &:hover,\n  &:focus {\n    background-color: rgb(44, 85, 149);\n    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;\n  }\n\n  &:active {\n    background-color: rgba(44, 85, 149, 0.5);\n  }\n\n  &:disabled {\n    background-color: rgba(44, 85, 149, 0.3);\n\n    color: #d5d5d5;\n\n    &:hover {\n      cursor: not-allowed;\n    }\n  }\n`;\n\nexport const ErrorMessage = styled.p`\n  color: rgba(255, 0, 0, 0.9);\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  ErrorMessage,\n  FromTitle,\n  MainButton,\n  MainForm,\n  MainInput,\n} from 'components/MainForm/MainForm.styled';\nimport { signUp } from 'redux/auth/operations';\n\nconst schema = yup\n  .object({\n    name: yup.string().required('This field is required!'),\n    email: yup\n      .string()\n      .email('Email should have valid form \"example@mail.com\"')\n      .required('This field is required!'),\n    password: yup.string().required('This field is required!'),\n  })\n  .required();\n\nexport const SignUpForm = ({ formTitle }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n  });\n\n  const dispatch = useDispatch();\n\n  const onSubmit = ({ name, email, password }) => {\n    dispatch(\n      signUp({\n        name,\n        email,\n        password,\n      })\n    );\n    reset();\n  };\n\n  return (\n    <MainForm onSubmit={handleSubmit(onSubmit)}>\n      {formTitle && <FromTitle>{formTitle}</FromTitle>}\n      <label>\n        <span>Name</span>\n        <MainInput\n          {...register('name')}\n          autoComplete=\"off\"\n          autoFocus\n          errors={errors.name}\n        />\n      </label>\n      {errors.name?.message && (\n        <ErrorMessage>{errors.name?.message}</ErrorMessage>\n      )}\n      <label>\n        <span>Email</span>\n        <MainInput\n          {...register('email')}\n          autoComplete=\"off\"\n          errors={errors.email}\n        />\n      </label>\n      {errors.email?.message && (\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n      )}\n\n      <label>\n        <span>Password</span>\n        <MainInput\n          {...register('password')}\n          type=\"password\"\n          autoComplete=\"off\"\n          errors={errors.password}\n        />\n      </label>\n      {errors.password?.message && (\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n      )}\n\n      <MainButton type=\"submit\">Sign Up</MainButton>\n    </MainForm>\n  );\n};\n\nSignUpForm.propTypes = { formTitle: PropTypes.string.isRequired };\n","import { FormWrapper } from 'components/MainForm/MainForm.styled';\nimport { SignUpForm } from 'components/SignUpForm/SignUpForm';\n\nconst SignUpPage = () => {\n  return (\n    <FormWrapper>\n      <SignUpForm formTitle=\"Sign Up\" />\n    </FormWrapper>\n  );\n};\n\nexport default SignUpPage;\n"],"names":["FormWrapper","styled","FromTitle","MainForm","MainInput","errors","MainButton","ErrorMessage","schema","yup","name","required","email","password","SignUpForm","formTitle","useForm","defaultValues","mode","resolver","yupResolver","register","handleSubmit","formState","reset","dispatch","useDispatch","onSubmit","signUp","autoComplete","autoFocus","message","type"],"sourceRoot":""}